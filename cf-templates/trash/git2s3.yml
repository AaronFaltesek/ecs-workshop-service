AWSTemplateFormatVersion: 2010-09-09
Description: 3rd party git integration with CodePipeline

Parameters:
  OutputBucketName:
    Description: OPTIONAL: Bucket Name where the zip file output should be placed, if left blank a bucket name will be automatically generated.
    Type: String
    Default: ""
  AllowedIps:
    Description: gitpull method only. Comma seperated list of IP CIDR blocks for source IP authentication. The GitHub IP ranges are provided as defaults.
    Type: String
    Default: #TODO 
  ApiSecret:
    Description: gitputll method only. WebHook Secrets for use with GitHub Enterprise and GitLab. If a secret is matched, IP range authentication is bypassed. Cannot contain: , \\ \
    Type: String
    Default: ""
    NoEcho: true
  GitToken:
    Description: zipdl method only. Personal access token, needed for GitHub Enterprise and GitLab.
    Type: String
    Default: ""
    NoEcho: true
  OauthKey:
    Description: zipdl method only. OAuth2 Key needed for BitBucket
    Type: String
    Default: ""
    ConstraintDescription: this key must be generated from the git server/provider
  OauthSecret:
    Description: zipdl method only. OAuth2 Secret needed for BitBucket
    Type: String
    Default: ""
    NoEcho: true
    ConstraintDescription: this secret must be generated from the git server/provider

Mappings:
  LambdaBuckets:
    us-east-1:
      Name: git-to-codepipeline-us-east-1
    us-west-2:
      Name: git-to-codepipeline-us-west-2
    us-west-1:
      Name: git-to-codepipeline-us-west-1

Conditions:
  UseAllowedIps:
    !Not [ !Equals [ !Ref AllowedIps, "" ] ]
  UseApiSecret:
    !Not [ !Equals [ !Ref ApiSecret, "" ] ]
  UseGitToken:
    !Not [ !Equals [ !Ref GitToken, "" ] ]
  UseOauthKey:
    !Not [ !Equals [ !Ref OauthKey, "" ] ]
  UseOauthSecret:
    !Not [ !Equals [ !Ref OauthSecret, "" ] ]
  AutoGenOutputBucketName:
    !Not [ !Equals [ !Ref OutputBucketName, "" ] ]

Resources: 
  KeyBucket:
    Type: AWS::S3::Bucket
    Propreties:
      Tags: []
  OutputBucket:
    Type: AWS::S3:Bucket
    Properties:
      BucketName:
        !If [ AutoGenOutputBucketName, !Ref OutputBucketName, !Ref AWS::NoValue ]
      VersioningConfiguration:
        Status: Enabled
      Tags: []
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: git CodePipeline integration, bucket to store ssh keys
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - 
            Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: !Join [ "", [ "arn:aws:iam::", !Ref AWS::AccountId, ":root" ]]
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: *
          -
            Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Join [ "", [ "arn:aws:iam::", !Ref AWS::AccountId, ":root" ]]
            Action:
              - "kms:Encrypt"
              - "kms:Decrpyt"
              - "kms:ReEncrypt"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: *
          - 
            Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS: !Join [ "", [ "arn:aws:iam::", !Ref AWS::AccountId, ":root" ]]
            Action:
              - "kms:CreateGrant"
              - "kms:ListGrants"
              - "kms:RevokeGrant"
            Resource: *
            Condition:
              Bool:
                kms:GrantIsForAWSResource: true

    CreateSSHKeyRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - 
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
          Path: /
          Policies:
            -
              PolicyName: git2cp-sshkeygen
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - 
                    Effect: Allow
                    Action:
                      - "s3:GetObject" 
                    Resource:
                      - !Join [ "", [ "arn:aws:s3:::", !Ref KeyBucket, "/crypto.zip"] ]
                  -
                    Effect: Allow
                    Action:
                      - "s3:PutObject"
                    Resource:
                      - !Join [ "", [ "arn:aws:s3:::", !Ref KeyBucket, "/enc_key" ] ]
                  - 
                    Effect: Allow
                    Action:
                      - "kms:Encrypt"
                    Resource: 
                      - "*"
                  - 
                    Effect: Allow
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource: 
                      - "arn:aws:logs:*:*:*"
  CreateSSHKeyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt CreateSSHKeyRole.Arn
      Runtime: python2.7
      Timeout: 300
      Code:
        S3Bucket: !FindInMap [ LambdaBuckets, !Ref AWS::Region, Name ]
        S3Key: v1.0/CreateSSHKey.zip
  CreateSSHKey:
    Type: AWS::CloudFormation::CustomResource
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSSHKeyLambda.Arn
      KeyBucket: !Ref Keybucket
      Region: !Ref AWS::Region
      KMSKey: !Ref KMSKey

  DeleteBucketContentsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17k
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: git2cp-deletebucketcontents
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: 
                  - "s3:*"
                Resource:
                  - !Join [ "" [ "arn:aws:s3:::", !Ref KeyBucket, "/*" ] ]
                  - !Join [ "" [ "arn:aws:s3:::", !Ref OutputBucket, "/*" ] ]
                  - !Join [ "" [ "arn:aws:s3:::", !Ref KeyBucket] ]
                  - !Join [ "" [ "arn:aws:s3:::", !Ref OutputBucket] ]
              -
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:*"

  DeleteBucketContentsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt DeleteBucketContentsRole.Arn
      Runtime: python2.7
      Timeout: 300
      Code:
        S3Bucket: !FindInMap [ LambdaBuckets, !Ref AWS::Region, Name ]
        S3Key: v1.0/DeleteBucketContents.zip

  DeleteBucketContents:
    Type: AWS::CloudFormation::CustomResource
    Version: 1.0
    DependOn:
      - KeyBucket
      - OutputBucket
    Properties:
      ServiceToken: !GetAtt DeleteBucketContentsLambda.Arn
      KeyBucket: !Ref KeyBucket
      OutputBucket: !Ref OutputBucket

  GitPullRole:
    Type: AWS::IAM:Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Path: /
        Policies:
          -
            PolicyName: git2cp-gitpull
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - 
                    Effect: Allow
                    Action:
                      - "kms:Decrypt"
                    Resource:
                      - "*"
                  -
                    Effect: Allow
                    Action:
                      - "s3:PutObject"
                    Resource:
                      - !Join [ "", [ "arn:aws:s3:::", !Ref OutputBucket ] ]
                      - !Join [ "", [ "arn:aws:s3:::", !Ref OutputBucket, "/*" ] ]
                  -
                    Effect: Allow
                    Action:
                      - "s3:GetObject"
                    Resource:
                      - !Join [ "", [ "arn:aws:s3:::", !Ref KeyBucket, "/enc_key" ] ]
                  -
                    Effect: Allow
                    Action: 
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource:
                      - "arn:aws:logs:*:*:*"
    GitPullLambda:
      Type: AWS::Lambda::Function
      Properties:
        Handler: lambda_function.lambda_handler
        MemorySize: 128
        Role: !GetAtt GitPullRole.Arn
        Runtime: python2.7
        Timeout: 300
        Code:
          S3Bucket: !FindInMap [ LambdaBuckets, !Ref AWS::Region, Name ]
          S3Key: v1.0/GitPullS3.zip

    ZipDlRole:
      Type: AWS::IAM:Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - 
              Sid: ""
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          -
            PolicyName: git2cp-zipdl
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - 
                  Effect: Allow
                  Action:
                    - "s3:PutObject"
                  Resource:
                    - !Join [ "" [ "arn:aws:s3:::", !Ref OutputBucket ] ]
                    - !Join [ "" [ "arn:aws:s3:::", !Ref OutputBucket, "/*" ] ]
                - 
                  Effect: Allow
                  Action: 
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "arn:aws:logs:*:*:*"

    ZipDlLambda:
      Type: AWS::Lambda::Function
      Properties:
        Handler: lambda_function.lambda_handler
        Role: !GetAtt ZipDlRole.Arn
        Code:
          S3Bucket: !FindInMap [ LambdaBuckets, !Ref AWS::Region, Name ]
          S3Key: v1.0/ZipDl.zip
        Runtime: python2.7
        MemorySize: 128
        Timeout: 30

    WebHookRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - 
              Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        Policies:
          -
            PolicyName: git2cp-webhook
            PolicyDocument:
              Version: 2012-10-17
              PolicyDocument:
                Version: 2012-10017
                Statement:
                  - 
                    Effect: Allow
                    Action:
                      - "lambda:InvokeAsync"
                      - "lambda:InvokeFunction"
                    Resource:
                      - !GetAtt GitPullLambda.Arn
                      - !GetAtt ZipDlLambda.Arn

  WebHookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: 2.0
        info:
          version: 2016-07-26T07:34:38Z
          title: !Join [ "", [ "G2CP-", !Ref AWS::StackName ] ]
          schemes:
            - https
          paths:
            /gitpull:
              post:
                consumes:
                  - application/json
                produces:
                  - application/json
                responses:
                  200:
                    description: 200 response
                    schema:
                      "$ref": "#/definitions/Empty"
                x-amazon-apigateway-integration:
                  type: aws
                  credentials: !GetAtt WebHookRole.Arn
                  responses:
                    default:
                      statusCode: 200
                  requestParameters:
                    inegration.request.header.X-Amz-Invocation-Type: "'Event'"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: POST
                  uri: !Join [ "" [ "arn:aws:apigateway:", !Ref AWS::Region, "lambda:path//2015-03-31/functions/", !GetAtt GitPullLambda.Arn, "/invocations" ] ]
                  requestTemplates:
                    application/json: 
                      !Join
                        - "" 
                        -
                          - "#set($allParams = $input.params())\n"
                          - "{\n"
                          - "\"body-json\" : $input.json('$'),\n"
                          - "\"params\" : {\n"
                          - "#foreach($type in $allParams.keySet())\n"
                          - "    #set($params = $allParams.get($type))\n"
                          - "\"$type\" : {\n"
                          - "    #foreach($paramName in $params.keySet())\n"
                          - "    \"$paramName\" : \"$util.escapJavaScript($params.get($paramName))\"\n"
                          - "        #if($foreach.hasNext),#end\n"
                          - "    #end\n" 
                          




                    



               
                    









            




