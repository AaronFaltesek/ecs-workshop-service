---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for microservies being deployed'
Parameters:
  GitHubUser:
    Description: 'GitHub UserName'
    Type: 'String'
  GitRepo:
    Description: 'URL for Git repo'
    Type: 'String'
  GitBranch:
    Description: 'Branch being deployed'
    Type: 'String'
  GitHubToken:
    Description: 'OAuth Token for repo access'
    Type: 'String'
  ServiceName:
    Description: 'Path on which Microservice is deployed'
    Type: 'String'
    AllowedPattern: '^\w*$'
  TemplatesBucket:
    Description: The bucket for templates
    Type: String
  ArtifactBucket:
    Description: 'Path on which Microservice is deployed'
    Type: 'String'
  MicroservicesTemplate:
    Description: 'Path on which CloudFormation templates are uploaded'
    Type: 'String'
Resources:
  PipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: ecs-workshop-service-pipeline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:*'
                - 'codebuild:*'
                - 'cloudformation:CreateStack'
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:CreateChangeSet'
                - 'cloudformation:ExecuteChangeSet'
                - 'cloudformation:DeleteChangeSet'
                - 'cloudformation:DescribeChangeSet'
                - 'cloudformation:SetStackPolicy'
                - 'iam:PassRole'
                - 'sns:Publish'
                - 'codecommit:BatchGetRepositories'
                - 'codecommit:Get*'
                - 'codecommit:GitPull'
                - 'codecommit:List*'
                - 'codecommit:Update*'
                - 'codecommit:Test*'
                - 'codecommit:UploadArchive'
                Effect: Allow
                Resource: '*'

  BuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 'codebuild.amazonaws.com'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  ImageRepo:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Join ['-',['appservice',!Ref ServiceName,'repo']]
      RepositoryPolicyText:
        Statement:
          -
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
            Effect: Allow
            Principal: '*'

  BuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Join ['-',['build',!Ref ServiceName,'container']]
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs.4.3.2
        EnvironmentVariables:
          - Name: "AWS_DEFAULT_REGION"
            Value: !Ref AWS::Region
          - Name: "AWS_ACCOUNT_ID"
            Value: !Ref AWS::AccountId
          - Name: "IMAGE_REPO_NAME"
            Value: !Join ['-',['appservice',!Ref ServiceName,'repo']]
          - Name: "IMAGE_TAG"
            Value: "latest"
      Name: !Sub build-${ServiceName}-container
      ServiceRole: !Ref BuildIamRole
      Source: 
        Type: CODEPIPELINE
        #BuildSpec
        
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Join [ '-', [!Ref ServiceName, 'Pipeline']]
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: 'S3'
      RoleArn: !GetAtt PipelineIamRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: AppSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: GitHubArtifact
              RunOrder: '1'
        - Name: ContainerBuild
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts: [Name: 'GitHubArtifact']
              OutputArtifacts: [Name: 'ContainerImageArtifacts']
              RunOrder: 20
              Configuration:
                ProjectName: !Sub build-${ServiceName}-image
          #- Name: ContainerTest
          #- Actions:
          #-   - Name: ContainerTest
          #-     ActionTypeId:
          #-       Category: Test
          #-       Owner: AWS
          #-       Version: 1
          #-       Provider: CodeBuild
          #-     RunOrder: 30
          #-     InputArtifacts: [Name: 'ContainerImageArtifacts']
          #-     Configuration:
          #-       ProjectName: 'test-docker-image'
          #- #- Name: ServiceDeploy
          #- Actions:
          #-   - Name: ServiceDeploy
          #-     ActionTypeId:
          #-       Category: Test
          #-       Owner: AWS
          #-       Version: 1
          #-       Provider: CloudFormation
          #-     InputArtifacts: [Name: 'ContainerImageArtifacts']
          #-     RunOrder: 40
          #-     Configuration:
          #-       ActionMode: CREATE_UPDATE
          #-       # TODO: Use a role Arn
          #-       StackName: !Join ['-', [!Ref ServiceName, 'service']]
          #-       # TODO: change the template path to be a new source
          #-       TemplatePath: !Ref MicroservicesTemplate
          #-       TemplateConfiguration: ContainerImageArtifacts::configuration.json
